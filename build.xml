<!DOCTYPE project>
<project name="selenium-tests" basedir="." default="main" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!--
      A good post to guide to create a build file:
      http://stackoverflow.com/questions/20382287/integrating-jacoco-in-sonar-using-ant/20413444#20413444
    -->


    <!--========================================================================
        Property Defaults
        
        Any of these properties can be overridden in either build.properties or override.properties
        =====================================================================-->

    <!-- Global properties -->
    <property environment="env" />
    <property file="${basedir}/build.properties" description="Properties customized for your particular project belong in this file." />

    <!-- Project meta properties -->
    <property name="impl.vendor" value="Pentaho Corporation" description="Jar file metadata describing the jar's vendor" />
    <property name="impl.productID" value="" description="Jar file metadata indicating the product ID (this is not the revision)" />

    <!-- Compile properties -->
    <property name="bin.dir" value="${basedir}/bin" description="Base directory for all non-dist build output" />
    <property name="src.java.dir" value="${basedir}/src/main/java" description="Source code of PageFactory for Selenium tests." />
    <property name="src.test.java.dir" value="${basedir}/src/test/java" description="Source code of test to run." />
    <property name="src.test.suite.dir" value="${basedir}/src/test/resources/TestNG_suites" description="Location of all xml files." />
    <property name="build.dir" value="${basedir}/build" description="Build directory." />
    <property name="classes.dir" value="${build.dir}/classes" description="Classes directory created during compilation." />
    <property name="target.dir" value="${basedir}/target" description="Target directory." />
    <property name="test.output.dir" value="${basedir}/test-output" description="Target directory." />
    <property name="jar.dir" value="${build.dir}/jar" description="Jar directory created during compilation." />
    <property name="lib.dir" value="${basedir}/lib" description="Directory that hosts Jar files required to compile project source." />
    <property name="lib.ext.dir" value="${basedir}/lib/ext" description="Directory that hosts Jar files required to compile project source. (IVY will populate this directory with required jars)" />
    <property name="tmp.dir" value="${basedir}/tmp" description="Temp directory only used for temp procedures" />
    <property name="resources.dir" value="${basedir}/resources" description="All itens need during the test execution." />

    <!-- Third party Ant tasks and tools properties -->
    <property name="pentaho.bi.server.dir" value="C:\Pentaho\biserver-ce" description="The location of Pentaho BI Server" />
    <property name="pentaho.bi.server.service.name" value="tomcat6" description="The service name of BI Server" />
    <property name="pentaho.bi.server.url" value="http://localhost:8080/pentaho" description="The URL to access the Pentaho Server." />
    <property name="pentaho.bi.server.hostname" value="localhost" description="The hostname where BA server is running." />
    <property name="pentaho.bi.server.port" value="8080" description="The port where BA server is running." />
    <property name="pentaho.postgres.service.name" value="Pentaho Solution Repository" description="The service name of Postgres" />
    <property name="pentaho.postgres.hostname" value="localhost" description="The hostname where postgres is running." />
    <property name="pentaho.postgres.port" value="5432" description="The port where postgres is running." />
    <property name="pentaho.release.version" value="7.x" description="Indicate the version that we are going to run the tests against." />
    <propertyset id="testng-pentaho-settings-id">
        <propertyref name="pentaho.release.version" />
    </propertyset>

    <!-- Ivy properties -->
    <property name="ivy.settingsurl" value="file:${basedir}/ivysettings.xml" description="URL to the (common) ivysettings.xml. This file is required by the build to configure IVY. Note you must escape the ':' if this property exists in a .properties file." />
    <property name="ivy.file" value="ivy.xml" description="The name of the IVY xml file defining your project's dependencies" />
    <property name="ivy.artifact.group" value="pentaho" description="IVY metadata describing the originating company or organization" />
    <property name="ivy.artifact.ivyfilename" value="ivy.xml" description="The name of the IVY xml file to deploy with the artifact" />
    <property name="ivy.reports.dir" value="${bin.dir}/reports/ivy" description="Base directory that holds all IVY dependency report files" />
    <property name="ivy.configs" value="*" description="Set of configs used for IVY reporting and checking operations" />
    <property name="ivy.use.symlinks" value="true" description="Flag indicating if Ivy should create symlinks when retrieving artifacts." />
    <property name="ivy.local.default.root" value="C:\.ivy2" description="Dir of ivy cache" />
    <property name="ivy.clean.pattern" value="pentaho" description="Clean CTools" />
    <property name="ivy.default.ivy.user.dir" value="${basedir}" description="Dir of ivy cache" />


    <!-- TEST propertis -->
    <property name="test.html.reports.dir" value="${basedir}/reports-html" description="Directory to drag reports for the selenium html scripts" />
    <property name="test.java.reports.dir" value="${basedir}/reports-java" description="Directory to drag reports" />
    <property name="test.java.reports.html.dir" value="${basedir}/reports-java/html" description="Directory for the generated report in HTML" />
    <property name="test.testng.suite.file" value="SmokeTests-CE.xml" />

    <taskdef resource="testngtasks" classpath="${lib.dir}/testng-latest.jar" />

    <!-- CLASSPATH FOR Selenium Tests -->
    <path id="test.java.classpath">
        <fileset dir="${lib.ext.dir}" includes="**/*" />
        <pathelement location="${classes.dir}" />
    </path>


    <!-- Set the project revision number to the value in the manifest file (if it has not been specified in the properties file -->
    <fail message="A project revision number has not been determined!">
        <condition>
            <matches string="${project.revision}" pattern="\$\{.*\}" />
        </condition>
    </fail>

    <!-- Set the project title to the value in the manifest file (if it has not been specified in the properties file -->
    <fail message="A project title has not been determined!">
        <condition>
            <matches string="${impl.title}" pattern="\$\{.*\}" />
        </condition>
    </fail>


    <!--========================================================================
        bootstrap

        Download, create and generate the necessary artifacts to build the project.
        =====================================================================-->
    <available classname="org.apache.ivy.Main" property="ivy.installed" />
    <target name="bootstrap" description="Install ivy" unless="ivy.installed">
        <mkdir dir="${user.home}/.ant/lib" />
        <get dest="${user.home}/.ant/lib/ivy.jar" src="http://mirrors.fe.up.pt/pub/apache/ant/ivy/2.4.0/maven2/2.4.0/ivy-2.4.0.jar" />
        <fail message="Ivy has been installed. Run the build again." />
    </target>


    <!--========================================================================
        init

        Create the necessary directories for the project.
        =====================================================================-->
    <target name="init" depends="resolve" description="Install ivy">
        <echo message="Create the necessary directories for the project."/>
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${test.java.reports.dir}" />

        <ivy:settings url="${ivy.settingsurl}" />
    </target>


    <!--========================================================================
        compile

        Compile the script tests in Java
        =====================================================================-->
    <target name="compile" depends="init">
        <javac srcdir="${src.java.dir};${src.test.java.dir}" destdir="${classes.dir}" fork="yes" debug="true" includeAntRuntime="false" classpathref="test.java.classpath" nowarn="true" encoding="UTF-8">
            <!--<compilerarg value="-Xlint"/>-->
        </javac>
    </target>

    <!--========================================================================
        test-java
    
        This process shall clean the project, compile the tests and run them.
        =====================================================================-->
    <target name="test-java" depends="clean-java, compile, stop-pentaho-bi-server">

        <!-- Starting Pentaho BI Server -->
        <antcall target="start-pentaho-bi-server" />
        <antcall target="waitfor-pentaho-bi-server-started" />
    </target>


    <!--========================================================================
        test-html
    
        This process shall clean the project, download the CTools, and copy to
        Pentaho Server.
        =====================================================================-->
    <target name="test-html" depends="clean-html, resolve-plugins, stop-pentaho-bi-server">
        <!-- copy data to the server -->
        <antcall target="copy-ctools-and-other-resources" />

        <!-- Starting Pentaho BI Server -->
        <antcall target="start-pentaho-bi-server" />
        <antcall target="waitfor-pentaho-bi-server-started" />
    </target>

    <!--========================================================================
        main

        Let's clean project, compile it, prepare environment and run the tests.
        =====================================================================-->
    <target name="main" depends="clean,compile,config,run"/>
    
    
    <!--========================================================================
        run

        This process shall execute Selenium Java tests.
        =====================================================================-->
    <target name="run">
        <testng classpathref="test.java.classpath" outputdir="${test.java.reports.dir}">
            <!-- The JVM arg is need to configure the logging system -->
            <jvmarg value="-Dlog4j.configurationFile=./log4j2.xml" />
            <propertyset refid="testng-pentaho-settings-id" />
            <xmlfileset dir="${src.test.suite.dir}" includes="${test.testng.suite.file}" />
        </testng>
    </target>

    
    <!--========================================================================
        config
    
        We need to configure the environment (Pentaho Server) in order to run
        the tests.
        =====================================================================-->
    <target name="config" depends="resolve,copy-ctools-and-other-resources"/>
    
    
    <!--========================================================================
        copy-ctools-and-other-resources
    
        Copy the CTools, samples and other resources to Pentaho server.
        =====================================================================-->
    <target name="copy-ctools-and-other-resources" depends="delete-sparkl-plugins">
        <echo message="Starting copy CTools and other resources." />

        <!-- Delete CTools on server -->
        <property name="pentaho.default.content.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/default-content" />
        <property name="pentaho.plugin.cgg.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/cgg" />
        <property name="pentaho.plugin.cda.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/cda" />
        <property name="pentaho.plugin.cdf.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/pentaho-cdf" />
        <property name="pentaho.plugin.cde.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/pentaho-cdf-dd" />
        <!--<property name="pentaho.plugin.sparkl.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/sparkl" />-->
        <!-- Delete CGG, CDA, CDF, CDE, SPARKL at default-content in BA Server -->
        <delete>
            <fileset dir="${pentaho.default.content.dir}" includes="**/*" />
        </delete>
        <!-- Delete CGG, CDA, CDF, CDE, SPARKL at system in BA Server -->
        <delete dir="${tmp.dir}" />
        <delete dir="${pentaho.plugin.cgg.dir}" />
        <delete dir="${pentaho.plugin.cda.dir}" />
        <delete dir="${pentaho.plugin.cdf.dir}" />
        <delete dir="${pentaho.plugin.cde.dir}" />
        <!--<delete dir="${pentaho.plugin.sparkl.dir}" />-->

        <!-- Unzip the ctools -->
        <unzip src="${lib.ext.dir}/plugin/cgg.zip" dest="${tmp.dir}" />
        <unzip src="${lib.ext.dir}/plugin/cda.zip" dest="${tmp.dir}" />
        <unzip src="${lib.ext.dir}/plugin/pentaho-cdf.zip" dest="${tmp.dir}" />
        <unzip src="${lib.ext.dir}/plugin/pentaho-cdf-dd.zip" dest="${tmp.dir}" />
        <!--<unzip src="${lib.ext.dir}/plugin/sparkl.zip" dest="${tmp.dir}" />-->
        <!-- unzip the samples -->
        <!-- 
1- Create a directory with name 'public'
2- Create a directory with name 'plugin-samples' under 'public'
3- Unzip the samples CDF, CDE and CDA
4- Move the samples dir (CDF, CDE, CDA) under 'plugin-samples'
-->
        <mkdir dir="${tmp.dir}/public/plugin-samples" />
        <unzip src="${lib.ext.dir}/plugin/pentaho-cdf-samples.zip" dest="${tmp.dir}/public/plugin-samples" />
        <unzip src="${lib.ext.dir}/plugin/pentaho-cdf-dd-solution.zip" dest="${tmp.dir}/public/plugin-samples" />
        <unzip src="${lib.ext.dir}/plugin/cda-samples.zip" dest="${tmp.dir}/public/plugin-samples" />
        <!-- copy the files for CGG tests -->
        <copy todir="${tmp.dir}/public">
            <fileset dir="${resources.dir}/cgg${pentaho.release.version}" />
        </copy>

        <zip destfile="${tmp.dir}/plugin-samples.zip">
            <zipfileset dir="${tmp.dir}/public" prefix="public" />
        </zip>

        <!-- Copy the CTools and sparkl -->
        <copy todir="${pentaho.plugin.cgg.dir}">
            <fileset dir="${tmp.dir}/cgg" />
        </copy>
        <copy todir="${pentaho.plugin.cda.dir}">
            <fileset dir="${tmp.dir}/cda" />
        </copy>
        <copy todir="${pentaho.plugin.cdf.dir}">
            <fileset dir="${tmp.dir}/pentaho-cdf" />
        </copy>
        <copy todir="${pentaho.plugin.cde.dir}">
            <fileset dir="${tmp.dir}/pentaho-cdf-dd" />
        </copy>
        <!--<copy todir="${pentaho.plugin.sparkl.dir}">
<fileset dir="${tmp.dir}/sparkl" />
  </copy>-->
        <copy file="${tmp.dir}/plugin-samples.zip" todir="${pentaho.default.content.dir}" />
        <!-- copy all issues to default content -->
        <!--<copy file="${resources.dir}/Issues/public.zip" todir="${pentaho.default.content.dir}" />-->
        <!-- Copy resources for CDF Tutorial -->
        <!--<copy todir="${pentaho.plugin.cdf.dir}">
<fileset dir="${resources.dir}/cdf-tutorial" />
  </copy>-->

        <!-- Add Sparkl plugins for tests -->
        <!--
  <mkdir dir="${tmp.dir}/sparkl-plugins" />
  <unzip src="${resources.dir}/Sparkl/Plugins.zip" dest="${tmp.dir}/sparkl-plugins" />
  <copy todir="${pentaho.bi.server.dir}/pentaho-solutions/system" overwrite="true">
<fileset dir="${tmp.dir}/sparkl-plugins">
  <include name="**/*" />
</fileset>
  </copy>-->
    </target>


    <!--========================================================================
        set-up-marketplace
        
        Preparing marketplace to be tested.
        So, what we need to do:
        1. remove the follwing directories:
            - system\marketplace
            - system\karaf\data
            - system\karaf\data1
            - system\karaf\deploy\pentaho-marketplace.kar
        2. copy the file "pentaho-marketplace.kar":
            - from ${lib.ext.dir} to system\karaf\deploy\ 
        =====================================================================-->
    <target name="set-up-marketplace">
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/marketplace" />
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/karaf/data" />
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/karaf/data1" />
        <delete file="${pentaho.bi.server.dir}/pentaho-solutions/system/karaf/deploy/pentaho-marketplace.kar" />
        <copy file="${lib.ext.dir}/plugin/pentaho-marketplace.kar" todir="${pentaho.bi.server.dir}/pentaho-solutions/system/karaf/deploy/" overwrite="true" />
    </target>


    <!--========================================================================
        delete-sparkl-plugins
        
        Will delete plugins sparkls that could be left in ba server by an error.
        =====================================================================-->
    <target name="delete-sparkl-plugins">
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/atest" />
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/atest1" />
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/CDE404" />
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/aTest" />
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/dTest" />
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/yTest" />
        <delete dir="${pentaho.bi.server.dir}/pentaho-solutions/system/testPlugin" />
    </target>


    <!--========================================================================
        stop-pentaho-bi-ce
        
        Stop BI Server CE.
        =====================================================================-->
    <target name="stop-pentaho-bi-ce">
        <!-- stop bi server ce -->
        <antcall target="stop-pentaho-bi-server" />
        <antcall target="waitfor-pentaho-bi-server-stopped" />
    </target>


    <!--========================================================================
        start-pentaho-bi-ce
        
        Start BI Server CE.
        =====================================================================-->
    <target name="start-pentaho-bi-ce" depends="stop-pentaho-bi-ce">
        <!-- start bi server ce -->
        <antcall target="start-pentaho-bi-server" />
        <antcall target="waitfor-pentaho-bi-server-started" />
    </target>


    <!--========================================================================
        stop-pentaho-bi-ee
        
        Stop BI Server EE.
        =====================================================================-->
    <target name="stop-pentaho-bi-ee">
        <!-- stop bi server ee -->
        <antcall target="stop-pentaho-bi-server" />
        <antcall target="waitfor-pentaho-bi-server-stopped" />
        <!-- stop postgres -->
        <antcall target="stop-postgres" />
        <antcall target="waitfor-postgres-stopped" />
    </target>


    <!--========================================================================
        start-pentaho-bi-ee
        
        Start BI Server EE.
        =====================================================================-->
    <target name="start-pentaho-bi-ee" depends="stop-pentaho-bi-ee">
        <!-- start postgres -->
        <antcall target="start-postgres" />
        <antcall target="waitfor-postgres-started" />
        <!-- start bi server ee -->
        <antcall target="start-pentaho-bi-server" />
        <antcall target="waitfor-pentaho-bi-server-started" />
    </target>


    <!--========================================================================
        Wait for tomcat shut-down
        =====================================================================-->
    <target name="waitfor-pentaho-bi-server-stopped">
        <waitfor maxwait="8" maxwaitunit="minute" checkevery="15" checkeveryunit="second">
            <not>
                <socket server="${pentaho.bi.server.hostname}" port="${pentaho.bi.server.port}" />
            </not>
        </waitfor>
    </target>


    <!--========================================================================
        waitfor-pentaho-bi-server-started
        
        Wait for tomcat start-up.
        =====================================================================-->
    <target name="waitfor-pentaho-bi-server-started">
        <waitfor maxwait="15" maxwaitunit="minute" checkevery="15" checkeveryunit="second">
            <http url="${pentaho.bi.server.url}" />
        </waitfor>
    </target>


    <!--========================================================================
        start-pentaho-bi-server
        
        Shall start the pentaho-server.
        =====================================================================-->
    <target name="start-pentaho-bi-server">
        <echo message="Start the Pentaho BI Server." />
        <service action="start" service="${pentaho.bi.server.service.name}" />
    </target>


    <!--========================================================================
        stop-pentaho-bi-server
        
        Shall stop the pentaho-server.
        =====================================================================-->
    <target name="stop-pentaho-bi-server">
        <echo message="Stop the Pentaho BI Server." />
        <service action="stop" service="${pentaho.bi.server.service.name}" />
    </target>


    <!--========================================================================
        start-postgres
        
        Shall start the Postgres.
        =====================================================================-->
    <target name="start-postgres">
        <echo message="Start the postgres service that is used by BA Server EE." />
        <service action="start" service="${pentaho.postgres.service.name}" />
    </target>


    <!--========================================================================
        Shall stop the Postgres.
        =====================================================================-->
    <target name="stop-postgres">
        <echo message="Stop the postgres service that is used by BA Server EE." />
        <service action="stop" service="${pentaho.postgres.service.name}" />
    </target>


    <!--========================================================================
        waitfor-postgres-started
        
        Wait for Postgres start-up.
        =====================================================================-->
    <target name="waitfor-postgres-started">
        <waitfor maxwait="1" maxwaitunit="minute" checkevery="5" checkeveryunit="second">
            <socket server="${pentaho.postgres.hostname}" port="${pentaho.postgres.port}" />
        </waitfor>
    </target>


    <!--========================================================================
        waitfor-postgres-stopped
    
        Wait for postgres shut-down.
        =====================================================================-->
    <target name="waitfor-postgres-stopped">
        <waitfor maxwait="1" maxwaitunit="minute" checkevery="5" checkeveryunit="second">
            <not>
                <socket server="${pentaho.postgres.hostname}" port="${pentaho.postgres.port}" />
            </not>
        </waitfor>
    </target>


    <!--========================================================================
        resolve

        Resolve all necessary dependencies for the project.
        =====================================================================-->
    <target name="resolve" depends="bootstrap,resolve-plugins,resolve-build" description="Retrieves all the dependent libraries." />


    <!--========================================================================
        resolve-plugins
    
        Using ivy and the dependencies for the project (defined in the ivy.xml
        file), this task will retrieve the needed files and place them into
        the defined directories.
        =====================================================================-->
    <target name="resolve-plugins" description="Retrieves all 'plugin' dependent libraries">
        <echo message="Resolve dependencies 'plugins'." />
        <ivy:resolve file="${ivy.file}" conf="plugins" />
        <ivy:retrieve pattern="${lib.ext.dir}/[conf]/[artifact](-[classifier]).[ext]" />
    </target>


    <!--========================================================================
        resolve-build
    
        Using ivy and the dependencies for the project (defined in the ivy.xml
        file), this task will retrieve the needed files and place them into
        the defined directories.
        =====================================================================-->
    <target name="resolve-build" description="Retrieves all 'build' dependent libraries">
        <echo message="Resolve dependencies 'build'." />
        <ivy:resolve file="${ivy.file}" conf="build" />
        <ivy:retrieve pattern="${lib.ext.dir}/[artifact](-[classifier]).[ext]" />
    </target>


    <!--========================================================================
        ivy-clean-all
      
        Clean the cache and local.
        =====================================================================-->
    <target name="ivy-clean-all" depends="ivy-clean-cache,ivy-clean-local" />


    <!--========================================================================
        ivy-clean-local
    
        Completely cleans your local repository of any files published locally
        by way of publish-local.
        
        WARNING: this is a global action and will affect other IVY projects
        currently referencing a locally published dependency.
        =====================================================================-->
    <target name="ivy-clean-local">
        <delete dir="${ivy.local.default.root}/" />
    </target>


    <!--========================================================================
        ivy-clean-cache
    
        Cleans the IVY cache. You are erasing IVY's memory.  Run this if you
        want to force IVY to go fetch all your project dependencies from scratch.
        
        WARNING: this will affect all IVY projects, not just the current workspace.
        =====================================================================-->
    <target name="ivy-clean-cache">
        <ivy:cleancache />
    </target>


    <!--========================================================================
        clean-common
    
        Removes resources share by Selenium HTML and JAVA scripts.
        =====================================================================-->
    <target name="clean-common" description="Detect common resources.">
        <delete dir="${tmp.dir}" />
        <delete dir="${lib.ext.dir}" />
        <delete dir="${target.dir}" />
        <delete dir="${test.output.dir}" />
        <delete dir="${bin.dir}" />
        <delete dir="${build.dir}" />
        <delete>
            <fileset dir="${basedir}" includes="junit*.properties" />
        </delete>
    </target>
    

    <!--========================================================================
        clean-html
    
        Removes regarding the target 'test-html'.
        =====================================================================-->
    <target name="clean-html" description="Cleans all the files generated from ctools">
        <delete dir="${test.html.reports.dir}" />
    </target>

    
    <!--========================================================================
        clean-java
    
        Removes regarding the target 'test-java'.
        =====================================================================-->
    <target name="clean-java" description="Cleans the directories created when build selenium java tests">
        <delete dir="${test.java.reports.dir}" />
    </target>
    

    <!--=======================================================================
        clean
    
        Removes all the files generated during the execution test for html and 
        java's selenium tests.
        =====================================================================-->
    <target name="clean" depends="clean-common,clean-html,clean-java" description="Cleans all the files generated on selenium html and java tests" />

    <!--========================================================================
        clean-all
    
        Removes all the files generated from build processes and ivy-downloaded jars.
        =====================================================================-->
    <target name="clean-all" depends="clean, ivy-clean-all" description="Cleans all the files generated from a build as well IVY-downloaded jars" />


    <!--========================================================================
        Macro usage to start or stop a service.
    
        parameters:
            action  - The name of the library (the filename w/o extension)
            service - The URL from which the library will be downloaded
        =====================================================================-->
    <macrodef name="service">
        <attribute name="service" />
        <attribute name="action" />
        <sequential>
            <exec executable="cmd.exe">
                <arg line="/c net @{action} '@{service}'" />
            </exec>
        </sequential>
    </macrodef>

</project>